name: ilivalidator package CI

on: 
  push:
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  build-jvm:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.0'
          java-version: '17'
          components: 'native-image,python'
          cache: 'gradle'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get install libxml2-dev libxslt1-dev

      - name: Build lib with Gradle
        run: ./gradlew clean lib:build -i

      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: reports
          path: lib/build/reports/tests/

      - name: Build app with Gradle
        id: buildJvm
        run: ./gradlew app:build -i

      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: reports
          path: app/build/reports/tests/

      - name: Decode key ring file
        if: ${{ success() && github.ref == 'refs/heads/main'}}
        run: |
          echo "${{secrets.SIGNING_SECRET_KEY_RING_FILE}}" > ~/.gradle/sonatype_upload.gpg.b64
          base64 -d ~/.gradle/sonatype_upload.gpg.b64 > ~/.gradle/sonatype_upload.gpg

      - name: Publish library jar file
        if: ${{ success() && github.ref == 'refs/heads/main'}}
        run: ./gradlew -i lib:publishToSonatype closeAndReleaseSonatypeStagingRepository -Psigning.keyId=${{secrets.SIGNING_KEY_ID}} -Psigning.password=${{secrets.SIGNING_PASSWORD}} -Psigning.secretKeyRingFile=$(echo ~/.gradle/sonatype_upload.gpg)
        env:
          OSSRH_USERNAME: ${{secrets.OSSRH_USERNAME}}
          OSSRH_PASSWORD: ${{secrets.OSSRH_PASSWORD}} 

      - name: 'Upload build artifact'
        if: always() && (steps.buildJvm.outcome == 'success')
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-jvm
          path: |
            app/build/distributions/*.zip

  build-native:
    name: 'Build with GraalVM on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        # https://github.com/actions/runner-images
        #os: [ ubuntu-22.04, macos-12, windows-2022 ]
        os: [ ubuntu-22.04]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Add Developer Command Prompt for Microsoft Visual C++ '
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.0'
          java-version: '17'
          components: 'native-image'
          cache: 'gradle'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build native image
        id: buildNative
        #./gradlew nativeTest
        run: |
          cd lib
          ./gradlew clean nativeCompile

      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: reports-native
          path: lib/build/reports/tests/

      - name: 'Upload build artifact'
        if: always() && (steps.buildNative.outcome == 'success')
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-${{ runner.os }}
          path: |
            lib/build/native/nativeCompile/

  # release:
  #   needs: [build-jvm, build-native]
  #   runs-on: ubuntu-22.04
  #   steps:

  #     - name: 'Check out repository'
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ steps.head.outputs.content }}
  #         fetch-depth: 0

  #     - name: 'Download all build artifacts'
  #       uses: actions/download-artifact@v2

  #     - name: 'List artifacts'
  #       run: |
  #         ls -la /home/runner/work/mgdm2oereb/mgdm2oereb/artifacts-jvm
  #         ls -la /home/runner/work/mgdm2oereb/mgdm2oereb/artifacts-native
  #         ls -la /home/runner/work/mgdm2oereb/mgdm2oereb/

  #     - name: Setup GraalVM
  #       uses: graalvm/setup-graalvm@v1
  #       with:
  #         version: '22.3.0'
  #         java-version: '17'
  #         components: 'native-image,python'
  #         cache: 'gradle'
  #         github-token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Release distributions
  #       run: |
  #         ./gradlew -i app:jreleaserRelease -x enforceGraalPython prepareEnv copyVenv zipVenv
  #       env:
  #         JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       if: ${{ success() && github.ref == 'refs/heads/main'}}
