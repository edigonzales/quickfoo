name: ilivalidator package CI

on: 
  push:
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:

  build-native-lib:
    name: 'Build on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        # https://github.com/actions/runner-images
        os: [ ubuntu-22.04, macos-12, windows-2022 ]
        #os: [ ubuntu-22.04]
        include:
          - os: 'ubuntu-22.04'
            plat-name: 'manylinux2014_x86_64'
          - os: 'macos-12'
            plat-name: 'macosx_12_0_x86_64'
          - os: 'windows-2022'
            plat-name: 'win_amd64'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Add Developer Command Prompt for Microsoft Visual C++ '
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.0'
          java-version: '17'
          components: 'native-image'
          cache: 'gradle'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          #cache: 'pip' 
        
      - name: Install Python requirements
        run: python -m pip install --upgrade setuptools wheel

      - name: Build Python package
        run: python setup.py bdist_wheel --plat-name=${{matrix.plat-name}}

      # - name: 'List artifacts'
      #   run: |
      #     ls -la dist

      # - name: Build native image
      #   id: buildNative
      #   #./gradlew nativeTest
      #   run: |
      #     cd lib
      #     ./gradlew clean nativeCompile

      # - uses: actions/upload-artifact@v2
      #   if: ${{ failure() }}
      #   with:
      #     name: reports-native
      #     path: lib/build/reports/tests/

      # - name: 'Upload build artifact'
      #   if: always() && (steps.buildNative.outcome == 'success')
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: artifacts-${{ runner.os }}
      #     path: |
      #       lib/build/native/nativeCompile/

      - name: 'Upload build artifact'
        #if: always() && (steps.buildNative.outcome == 'success')
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            dist/



  # release:
  #   needs: [build-jvm, build-native]
  #   runs-on: ubuntu-22.04
  #   steps:

  #     - name: 'Check out repository'
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ steps.head.outputs.content }}
  #         fetch-depth: 0

  #     - name: 'Download all build artifacts'
  #       uses: actions/download-artifact@v2

  #     - name: 'List artifacts'
  #       run: |
  #         ls -la /home/runner/work/mgdm2oereb/mgdm2oereb/artifacts-jvm
  #         ls -la /home/runner/work/mgdm2oereb/mgdm2oereb/artifacts-native
  #         ls -la /home/runner/work/mgdm2oereb/mgdm2oereb/

  #     - name: Setup GraalVM
  #       uses: graalvm/setup-graalvm@v1
  #       with:
  #         version: '22.3.0'
  #         java-version: '17'
  #         components: 'native-image,python'
  #         cache: 'gradle'
  #         github-token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Release distributions
  #       run: |
  #         ./gradlew -i app:jreleaserRelease -x enforceGraalPython prepareEnv copyVenv zipVenv
  #       env:
  #         JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       if: ${{ success() && github.ref == 'refs/heads/main'}}
